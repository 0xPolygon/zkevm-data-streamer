// Code generated by "enumer -type=Command"; DO NOT EDIT.

package datastreamer

import (
	"fmt"
)

const _CommandName = "CmdStartCmdStopCmdHeaderCmdStartBookmarkCmdEntryCmdBookmark"

var _CommandIndex = [...]uint8{0, 8, 15, 24, 40, 48, 59}

func (i Command) String() string {
	i -= 1
	if i >= Command(len(_CommandIndex)-1) {
		return fmt.Sprintf("Command(%d)", i+1)
	}
	return _CommandName[_CommandIndex[i]:_CommandIndex[i+1]]
}

var _CommandValues = []Command{1, 2, 3, 4, 5, 6}

var _CommandNameToValueMap = map[string]Command{
	_CommandName[0:8]:   1,
	_CommandName[8:15]:  2,
	_CommandName[15:24]: 3,
	_CommandName[24:40]: 4,
	_CommandName[40:48]: 5,
	_CommandName[48:59]: 6,
}

// CommandString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CommandString(s string) (Command, error) {
	if val, ok := _CommandNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Command values", s)
}

// CommandValues returns all values of the enum
func CommandValues() []Command {
	return _CommandValues
}

// IsACommand returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Command) IsACommand() bool {
	for _, v := range _CommandValues {
		if i == v {
			return true
		}
	}
	return false
}
